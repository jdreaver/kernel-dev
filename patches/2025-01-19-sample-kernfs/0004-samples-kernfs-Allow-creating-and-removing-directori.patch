From 42ca49c4e688009dfa753640cdb84f8ac9abd8de Mon Sep 17 00:00:00 2001
From: David Reaver <me@davidreaver.com>
Date: Mon, 20 Jan 2025 12:31:50 -0800
Subject: [PATCH 4/5] samples/kernfs: Allow creating and removing directories

Users can mkdir and rmdir sample_kernfs directories, similar to how cgroups
are added and removed in the cgroup pseudo-filesystem. New directories
automatically get a counter file.

kernfs doesn't expose functions to traverse child nodes. We demonstrate how
to keep track of child nodes ourselves in sample_kernfs_directory.

Removing a directory is surprisingly tricky and can deadlock if you use
kernfs_remove() instead of kernfs_remove_self(), so a comment explains the
motivation for using kernfs_remove_self().

Signed-off-by: David Reaver <me@davidreaver.com>
---
 samples/kernfs/sample_kernfs.c | 84 +++++++++++++++++++++++++++++++++-
 1 file changed, 82 insertions(+), 2 deletions(-)

diff --git a/samples/kernfs/sample_kernfs.c b/samples/kernfs/sample_kernfs.c
index e3484a921b07..87b41a8e64b1 100644
--- a/samples/kernfs/sample_kernfs.c
+++ b/samples/kernfs/sample_kernfs.c
@@ -17,6 +17,12 @@
 struct sample_kernfs_directory {
 	/* Holds the current count in the counter file */
 	atomic64_t count;
+
+	/* Holds the list of this directory's subdirectories */
+	struct list_head subdirs;
+
+	/* Used to add this dir to parent's subdirs list. */
+	struct list_head siblings;
 };
 
 static struct sample_kernfs_directory *sample_kernfs_create_dir(void)
@@ -27,6 +33,9 @@ static struct sample_kernfs_directory *sample_kernfs_create_dir(void)
 	if (!dir)
 		return NULL;
 
+	INIT_LIST_HEAD(&dir->subdirs);
+	INIT_LIST_HEAD(&dir->siblings);
+
 	return dir;
 }
 
@@ -98,6 +107,77 @@ static int sample_kernfs_populate_dir(struct kernfs_node *dir_kn)
 	return 0;
 }
 
+static int sample_kernfs_mkdir(struct kernfs_node *parent_kn, const char *name, umode_t mode)
+{
+	struct kernfs_node *dir_kn;
+	struct sample_kernfs_directory *dir, *parent_dir;
+	int ret;
+
+	dir = sample_kernfs_create_dir();
+	if (!dir)
+		return -ENOMEM;
+
+	/* dir gets stored in dir_kn->priv so we can access it later. */
+	dir_kn = kernfs_create_dir_ns(parent_kn, name, mode, current_fsuid(),
+				      current_fsgid(), dir, NULL);
+
+	if (IS_ERR(dir_kn))
+		return PTR_ERR(dir_kn);
+
+	ret = sample_kernfs_populate_dir(dir_kn);
+	if (ret) {
+		kernfs_remove(dir_kn);
+		return ret;
+	}
+
+	/* Add directory to parent->subdirs */
+	parent_dir = parent_kn->priv;
+	list_add(&dir->siblings, &parent_dir->subdirs);
+
+	return 0;
+}
+
+static void sample_kernfs_remove_subtree(struct sample_kernfs_directory *dir)
+{
+	struct sample_kernfs_directory *child, *tmp;
+
+	/*
+	 * Recursively remove children. Note that recursion is usually frowned
+	 * upon in the kernel. If this were a real filesystem we would create a
+	 * way to iterate through children without recursion.
+	 */
+	list_for_each_entry_safe(child, tmp, &dir->subdirs, siblings) {
+		sample_kernfs_remove_subtree(child);
+	}
+
+	/* Remove this directory from its parent's subdirs list */
+	list_del(&dir->siblings);
+
+	kfree(dir);
+}
+
+static int sample_kernfs_rmdir(struct kernfs_node *kn)
+{
+	struct sample_kernfs_directory *dir = kn->priv;
+
+	/*
+	 * kernfs_remove_self safely removes the node while also breaking out of
+	 * kernfs active protection (see kernfs_break_active_protection). This
+	 * is necessary to avoid a deadlock because the kernfs function that
+	 * called rmdir is holding the lock.
+	 */
+	kernfs_remove_self(kn);
+
+	sample_kernfs_remove_subtree(dir);
+
+	return 0;
+}
+
+static struct kernfs_syscall_ops sample_kernfs_kf_syscall_ops = {
+	.mkdir		= sample_kernfs_mkdir,
+	.rmdir		= sample_kernfs_rmdir,
+};
+
 static void sample_kernfs_fs_context_free(struct fs_context *fc)
 {
 	struct kernfs_fs_context *kfc = fc->fs_private;
@@ -127,7 +207,7 @@ static int sample_kernfs_init_fs_context(struct fs_context *fc)
 		return -ENOMEM;
 
 	/* dir gets stored in root->priv so we can access it later. */
-	root = kernfs_create_root(NULL, 0, dir);
+	root = kernfs_create_root(&sample_kernfs_kf_syscall_ops, 0, dir);
 	if (IS_ERR(root))
 		return PTR_ERR(root);
 
@@ -154,7 +234,7 @@ static void sample_kernfs_kill_sb(struct super_block *sb)
 
 	kernfs_kill_sb(sb);
 	kernfs_destroy_root(root);
-	kfree(root_dir);
+	sample_kernfs_remove_subtree(root_dir);
 }
 
 static struct file_system_type sample_kernfs_fs_type = {
