From cd297bb3d1f088497a791789ba72bb642e2fcadb Mon Sep 17 00:00:00 2001
From: David Reaver <me@davidreaver.com>
Date: Mon, 20 Jan 2025 09:38:38 -0800
Subject: [PATCH 3/7] samples: Add counter file in each sample_kernfs directory

Signed-off-by: David Reaver <me@davidreaver.com>
---
 samples/kernfs/sample_kernfs.c | 60 ++++++++++++++++++++++++++++++++++
 1 file changed, 60 insertions(+)

diff --git a/samples/kernfs/sample_kernfs.c b/samples/kernfs/sample_kernfs.c
index b1409862547e..3224945442d4 100644
--- a/samples/kernfs/sample_kernfs.c
+++ b/samples/kernfs/sample_kernfs.c
@@ -14,6 +14,59 @@
 
 #define SAMPLE_KERNFS_MAGIC 0x8d000ff0
 
+struct sample_kernfs_directory {
+	atomic64_t count;
+};
+
+static int sample_kernfs_counter_seq_show(struct seq_file *sf, void *v)
+{
+	struct kernfs_open_file *of = sf->private;
+	struct kernfs_node *dir_kn = kernfs_get_parent(of->kn);
+	struct sample_kernfs_directory *counter_dir = dir_kn->priv;
+	u64 count = atomic64_inc_return(&counter_dir->count);
+
+	seq_printf(sf, "%llu\n", count);
+	return 0;
+}
+
+static struct kernfs_ops sample_kernfs_counter_kf_ops = {
+	.seq_show	= sample_kernfs_counter_seq_show,
+};
+
+static int sample_kernfs_add_counter_file(struct kernfs_node *dir_kn)
+{
+	struct kernfs_node *kn;
+
+	kn = __kernfs_create_file(dir_kn, "counter", 0666, current_fsuid(),
+				  current_fsgid(), 0,
+				  &sample_kernfs_counter_kf_ops, NULL,
+				  NULL, NULL);
+
+	if (IS_ERR(kn))
+		return PTR_ERR(kn);
+
+	return 0;
+}
+
+static int sample_kernfs_populate_dir(struct kernfs_node *dir_kn)
+{
+	struct sample_kernfs_directory *dir;
+	int err;
+
+	// We allocate a struct to hold directory information, which gets
+	// stuffed into the private data of the kernfs_node for this directory.
+	dir = kzalloc(sizeof(struct sample_kernfs_directory), GFP_KERNEL);
+	if (!dir)
+		return -ENOMEM;
+	dir_kn->priv = dir;
+
+	err = sample_kernfs_add_counter_file(dir_kn);
+	if (err)
+		return err;
+
+	return 0;
+}
+
 static void sample_kernfs_fs_context_free(struct fs_context *fc)
 {
 	struct kernfs_fs_context *kfc = fc->fs_private;
@@ -31,6 +84,7 @@ static int sample_kernfs_init_fs_context(struct fs_context *fc)
 {
 	struct kernfs_fs_context *kfc;
 	struct kernfs_root *root;
+	int err;
 
 	kfc = kzalloc(sizeof(struct kernfs_fs_context), GFP_KERNEL);
 	if (!kfc)
@@ -46,6 +100,12 @@ static int sample_kernfs_init_fs_context(struct fs_context *fc)
 	fc->ops = &sample_kernfs_fs_context_ops;
 	fc->global = true;
 
+	err = sample_kernfs_populate_dir(kernfs_root_to_node(root));
+	if (err) {
+		kernfs_destroy_root(root);
+		return err;
+	}
+
 	return 0;
 }
 
