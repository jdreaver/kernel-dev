From 294baab6c469582911dcffe6704481f055165acb Mon Sep 17 00:00:00 2001
From: David Reaver <me@davidreaver.com>
Date: Wed, 29 Jan 2025 16:06:06 -0800
Subject: [RFC PATCH 3/3] debugfs: tmp commit with fixups not handled by
 coccinelle script
To: Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
    Rafael J. Wysocki <rafael@kernel.org>,
    Danilo Krummrich <dakr@kernel.org>
Cc: Steven Rostedt <rostedt@goodmis.org>,
    Christian Brauner <brauner@kernel.org>,
    linux-fsdevel@vger.kernel.org,
    linux-kernel@vger.kernel.org

Signed-off-by: David Reaver <me@davidreaver.com>
---
 block/blk-mq-debugfs.c             |  2 +-
 drivers/bus/moxtet.c               |  2 +-
 drivers/phy/realtek/phy-rtk-usb2.c |  2 +-
 drivers/phy/realtek/phy-rtk-usb3.c |  2 +-
 fs/debugfs/file.c                  |  3 +--
 fs/debugfs/inode.c                 | 26 +++++++++++++-------------
 include/linux/fault-inject.h       |  3 +--
 kernel/sched/debug.c               |  2 +-
 lib/fault-inject.c                 |  2 +-
 virt/kvm/kvm_main.c                |  5 +++--
 10 files changed, 24 insertions(+), 25 deletions(-)

diff --git a/block/blk-mq-debugfs.c b/block/blk-mq-debugfs.c
index f8aeffe1ef20..26f82b9b191e 100644
--- a/block/blk-mq-debugfs.c
+++ b/block/blk-mq-debugfs.c
@@ -609,7 +609,7 @@ static void debugfs_create_files(struct debugfs_node *parent, void *data,
 	if (IS_ERR_OR_NULL(parent))
 		return;
 
-	d_inode(parent)->i_private = data;
+	debugfs_node_inode(parent)->i_private = data;
 
 	for (; attr->name; attr++)
 		debugfs_create_file(attr->name, attr->mode, parent,
diff --git a/drivers/bus/moxtet.c b/drivers/bus/moxtet.c
index 6276551d7968..e2d7fcf1d9e4 100644
--- a/drivers/bus/moxtet.c
+++ b/drivers/bus/moxtet.c
@@ -552,7 +552,7 @@ static const struct file_operations output_fops = {
 
 static int moxtet_register_debugfs(struct moxtet *moxtet)
 {
-	struct dentry *root, *entry;
+	struct debugfs_node *root, *entry;
 
 	root = debugfs_create_dir("moxtet", NULL);
 
diff --git a/drivers/phy/realtek/phy-rtk-usb2.c b/drivers/phy/realtek/phy-rtk-usb2.c
index b84a8db7168d..eff7bf8f8ee1 100644
--- a/drivers/phy/realtek/phy-rtk-usb2.c
+++ b/drivers/phy/realtek/phy-rtk-usb2.c
@@ -708,7 +708,7 @@ static const struct phy_ops ops = {
 };
 
 #ifdef CONFIG_DEBUG_FS
-static struct dentry *create_phy_debug_root(void)
+static struct debugfs_node *create_phy_debug_root(void)
 {
 	struct debugfs_node *phy_debug_root;
 
diff --git a/drivers/phy/realtek/phy-rtk-usb3.c b/drivers/phy/realtek/phy-rtk-usb3.c
index d5943da94484..d309389b6f42 100644
--- a/drivers/phy/realtek/phy-rtk-usb3.c
+++ b/drivers/phy/realtek/phy-rtk-usb3.c
@@ -342,7 +342,7 @@ static const struct phy_ops ops = {
 };
 
 #ifdef CONFIG_DEBUG_FS
-static struct dentry *create_phy_debug_root(void)
+static struct debugfs_node *create_phy_debug_root(void)
 {
 	struct debugfs_node *phy_debug_root;
 
diff --git a/fs/debugfs/file.c b/fs/debugfs/file.c
index 570087bbb9fc..6f7b74337df9 100644
--- a/fs/debugfs/file.c
+++ b/fs/debugfs/file.c
@@ -76,8 +76,7 @@ enum dbgfs_get_mode {
 	DBGFS_GET_SHORT,
 };
 
-static int __debugfs_file_get(struct debugfs_node *dentry,
-			      enum dbgfs_get_mode mode)
+static int __debugfs_file_get(struct dentry *dentry, enum dbgfs_get_mode mode)
 {
 	struct debugfs_fsdata *fsd;
 	void *d_fsd;
diff --git a/fs/debugfs/inode.c b/fs/debugfs/inode.c
index f72866817376..2d004b2afceb 100644
--- a/fs/debugfs/inode.c
+++ b/fs/debugfs/inode.c
@@ -43,7 +43,7 @@ static unsigned int debugfs_allow __ro_after_init = DEFAULT_DEBUGFS_ALLOW_BITS;
  * to lock down individual files.
  */
 static int debugfs_setattr(struct mnt_idmap *idmap,
-			   struct debugfs_node *dentry, struct iattr *ia)
+			   struct dentry *dentry, struct iattr *ia)
 {
 	int ret;
 
@@ -192,7 +192,7 @@ static int debugfs_reconfigure(struct fs_context *fc)
 	return 0;
 }
 
-static int debugfs_show_options(struct seq_file *m, struct debugfs_node *root)
+static int debugfs_show_options(struct seq_file *m, struct dentry *root)
 {
 	struct debugfs_fs_info *fsi = root->d_sb->s_fs_info;
 
@@ -239,7 +239,7 @@ static const struct super_operations debugfs_super_operations = {
 	.free_inode	= debugfs_free_inode,
 };
 
-static void debugfs_release_dentry(struct debugfs_node *dentry)
+static void debugfs_release_dentry(struct dentry *dentry)
 {
 	struct debugfs_fsdata *fsd = dentry->d_fsdata;
 
@@ -341,7 +341,7 @@ MODULE_ALIAS_FS("debugfs");
 struct debugfs_node *debugfs_lookup(const char *name, struct debugfs_node *parent)
 {
 	struct debugfs_node *node;
-	struct debugfs_node *dentry;
+	struct dentry *dentry;
 
 	if (!debugfs_initialized() || IS_ERR_OR_NULL(name) || IS_ERR(parent))
 		return NULL;
@@ -380,7 +380,7 @@ struct inode *debugfs_node_inode(struct debugfs_node *node)
 
 static struct dentry *start_creating(const char *name, struct dentry *parent)
 {
-	struct debugfs_node *dentry;
+	struct dentry *dentry;
 	int error;
 
 	if (!(debugfs_allow & DEBUGFS_ALLOW_API))
@@ -447,13 +447,13 @@ static struct dentry *end_creating(struct dentry *dentry)
 	return dentry;
 }
 
-static struct debugfs_node *__debugfs_create_file(const char *name, umode_t mode,
-				struct debugfs_node *parent, void *data,
+static struct dentry *__debugfs_create_file(const char *name, umode_t mode,
+				struct dentry *parent, void *data,
 				const void *aux,
 				const struct file_operations *proxy_fops,
 				const void *real_fops)
 {
-	struct debugfs_node *dentry;
+	struct dentry *dentry;
 	struct inode *inode;
 
 	if (!(mode & S_IFMT))
@@ -496,7 +496,7 @@ struct debugfs_node *debugfs_create_file_full(const char *name, umode_t mode,
 					const void *aux,
 					const struct file_operations *fops)
 {
-	struct debugfs_node *dentry;
+	struct dentry *dentry;
 
 	dentry = __debugfs_create_file(name, mode, (struct dentry *)parent,
 				       data, aux,
@@ -512,7 +512,7 @@ struct debugfs_node *debugfs_create_file_short(const char *name, umode_t mode,
 					const struct debugfs_short_fops *fops)
 {
 
-	struct debugfs_node *dentry;
+	struct dentry *dentry;
 
 	dentry = __debugfs_create_file(name, mode, (struct dentry *)parent,
 				       data, aux,
@@ -553,7 +553,7 @@ struct debugfs_node *debugfs_create_file_unsafe(const char *name, umode_t mode,
 				   struct debugfs_node *parent, void *data,
 				   const struct file_operations *fops)
 {
-	struct debugfs_node *dentry;
+	struct dentry *dentry;
 
 	dentry = __debugfs_create_file(name, mode, (struct dentry *)parent, data,
 				       NULL, &debugfs_open_proxy_file_operations,
@@ -725,7 +725,7 @@ struct debugfs_node *debugfs_create_symlink(const char *name,
 					    struct debugfs_node *parent,
 					    const char *target)
 {
-	struct debugfs_node *dentry;
+	struct dentry *dentry;
 	struct inode *inode;
 	char *link = kstrdup(target, GFP_KERNEL);
 	if (!link)
@@ -752,7 +752,7 @@ struct debugfs_node *debugfs_create_symlink(const char *name,
 }
 EXPORT_SYMBOL_GPL(debugfs_create_symlink);
 
-static void __debugfs_file_removed(struct debugfs_node *dentry)
+static void __debugfs_file_removed(struct dentry *dentry)
 {
 	struct debugfs_fsdata *fsd;
 
diff --git a/include/linux/fault-inject.h b/include/linux/fault-inject.h
index e5bfc36b35e2..f7e5d2463713 100644
--- a/include/linux/fault-inject.h
+++ b/include/linux/fault-inject.h
@@ -5,7 +5,6 @@
 #include <linux/err.h>
 #include <linux/types.h>
 
-struct dentry;
 struct kmem_cache;
 
 #ifdef CONFIG_FAULT_INJECTION
@@ -33,7 +32,7 @@ struct fault_attr {
 
 	unsigned long count;
 	struct ratelimit_state ratelimit_state;
-	struct dentry *dname;
+	struct debugfs_node *dname;
 };
 
 enum fault_flags {
diff --git a/kernel/sched/debug.c b/kernel/sched/debug.c
index 668b0cc9925e..6a1f6b50edc3 100644
--- a/kernel/sched/debug.c
+++ b/kernel/sched/debug.c
@@ -568,7 +568,7 @@ static const struct file_operations sd_flags_fops = {
 	.release	= single_release,
 };
 
-static void register_sd(struct sched_domain *sd, struct dentry *parent)
+static void register_sd(struct sched_domain *sd, struct debugfs_node *parent)
 {
 #define SDM(type, mode, member)	\
 	debugfs_create_##type(#member, mode, parent, &sd->member)
diff --git a/lib/fault-inject.c b/lib/fault-inject.c
index d9a8fe11e6a4..5bf0f47725e8 100644
--- a/lib/fault-inject.c
+++ b/lib/fault-inject.c
@@ -262,7 +262,7 @@ struct debugfs_node *fault_create_debugfs_attr(const char *name,
 	debugfs_create_xul("reject-end", mode, dir, &attr->reject_end);
 #endif /* CONFIG_FAULT_INJECTION_STACKTRACE_FILTER */
 
-	attr->dname = dget(dir);
+	attr->dname = debugfs_node_get(dir);
 	return dir;
 }
 EXPORT_SYMBOL_GPL(fault_create_debugfs_attr);
diff --git a/virt/kvm/kvm_main.c b/virt/kvm/kvm_main.c
index edba5dd67c41..165764eafe9e 100644
--- a/virt/kvm/kvm_main.c
+++ b/virt/kvm/kvm_main.c
@@ -1017,7 +1017,7 @@ static int kvm_create_vm_debugfs(struct kvm *kvm, const char *fdname)
 	dent = debugfs_lookup(dir_name, kvm_debugfs_dir);
 	if (dent) {
 		pr_warn_ratelimited("KVM: debugfs: duplicate directory %s\n", dir_name);
-		dput(dent);
+		debugfs_node_put(dent);
 		mutex_unlock(&kvm_debugfs_lock);
 		return 0;
 	}
@@ -6216,7 +6216,8 @@ static void kvm_uevent_notify_change(unsigned int type, struct kvm *kvm)
 		char *tmp, *p = kmalloc(PATH_MAX, GFP_KERNEL);
 
 		if (p) {
-			tmp = dentry_path_raw(kvm->debugfs_dentry, p, PATH_MAX);
+			tmp = debugfs_node_path_raw(kvm->debugfs_dentry, p,
+						    PATH_MAX);
 			if (!IS_ERR(tmp))
 				add_uevent_var(env, "STATS_PATH=%s", tmp);
 			kfree(p);
