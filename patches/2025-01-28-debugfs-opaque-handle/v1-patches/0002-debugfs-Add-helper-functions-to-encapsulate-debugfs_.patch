From 0ce2cb502a6a6fb4773ae7d810b29a311669384e Mon Sep 17 00:00:00 2001
From: David Reaver <me@davidreaver.com>
Date: Mon, 3 Feb 2025 13:25:34 -0800
Subject: [RFC PATCH 2/6] debugfs: Add helper functions to encapsulate
 debugfs_node
To: Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
    Rafael J. Wysocki <rafael@kernel.org>,
    Danilo Krummrich <dakr@kernel.org>
Cc: Steven Rostedt <rostedt@goodmis.org>,
    Christian Brauner <brauner@kernel.org>,
    Alexander Viro <viro@zeniv.linux.org.uk>,
    Tejun Heo <tj@kernel.org>,
    linux-fsdevel@vger.kernel.org,
    cocci@inria.fr,
    linux-kernel@vger.kernel.org

When debugfs_node becomes a struct, users will need a few various helper
functions since they won't be able to access to underlying dentry. This
commit adds these helpers, which are then used in the automated Coccinelle
conversion commit.

Signed-off-by: David Reaver <me@davidreaver.com>
---
 fs/debugfs/inode.c      | 38 +++++++++++++++++++++++++++++++++++++
 include/linux/debugfs.h | 42 +++++++++++++++++++++++++++++++++++++++++
 2 files changed, 80 insertions(+)

diff --git a/fs/debugfs/inode.c b/fs/debugfs/inode.c
index 75715d8877ee..6892538d9d49 100644
--- a/fs/debugfs/inode.c
+++ b/fs/debugfs/inode.c
@@ -353,6 +353,44 @@ struct dentry *debugfs_lookup(const char *name, struct dentry *parent)
 }
 EXPORT_SYMBOL_GPL(debugfs_lookup);
 
+char *debugfs_node_path_raw(struct debugfs_node *node, char *buf, size_t buflen)
+{
+	return dentry_path_raw(node, buf, buflen);
+}
+EXPORT_SYMBOL_GPL(debugfs_node_path_raw);
+
+struct debugfs_node *debugfs_node_get(struct debugfs_node *node)
+{
+	return dget(node);
+}
+EXPORT_SYMBOL_GPL(debugfs_node_get);
+
+void debugfs_node_put(struct debugfs_node *node)
+{
+	dput(node);
+}
+EXPORT_SYMBOL_GPL(debugfs_node_put);
+
+struct inode *debugfs_node_inode(struct debugfs_node *node)
+{
+	return d_inode(node);
+}
+EXPORT_SYMBOL_GPL(debugfs_node_inode);
+
+struct debugfs_node *debugfs_node_from_dentry(struct dentry *dentry)
+{
+	if (dentry->d_sb->s_op == &debugfs_super_operations)
+		return dentry;
+	return NULL;
+}
+EXPORT_SYMBOL_GPL(debugfs_node_from_dentry);
+
+struct dentry *debugfs_node_dentry(struct debugfs_node *node)
+{
+	return node;
+}
+EXPORT_SYMBOL_GPL(debugfs_node_dentry);
+
 static struct dentry *start_creating(const char *name, struct dentry *parent)
 {
 	struct dentry *dentry;
diff --git a/include/linux/debugfs.h b/include/linux/debugfs.h
index e6ee571e8c36..33b4c3c9a5a9 100644
--- a/include/linux/debugfs.h
+++ b/include/linux/debugfs.h
@@ -79,10 +79,23 @@ struct debugfs_short_fops {
 
 struct dentry *debugfs_lookup(const char *name, struct dentry *parent);
 
+char *debugfs_node_path_raw(struct debugfs_node *node, char *buf, size_t buflen);
+
+struct debugfs_node *debugfs_node_get(struct debugfs_node *node);
+
+void debugfs_node_put(struct debugfs_node *node);
+
+struct inode *debugfs_node_inode(struct debugfs_node *);
+
+struct debugfs_node *debugfs_node_from_dentry(struct dentry *dentry);
+
+struct dentry *debugfs_node_dentry(struct debugfs_node *node);
+
 struct dentry *debugfs_create_file_full(const char *name, umode_t mode,
 					struct dentry *parent, void *data,
 					const void *aux,
 					const struct file_operations *fops);
+
 struct dentry *debugfs_create_file_short(const char *name, umode_t mode,
 					 struct dentry *parent, void *data,
 					 const void *aux,
@@ -271,6 +284,35 @@ static inline struct dentry *debugfs_lookup(const char *name,
 	return ERR_PTR(-ENODEV);
 }
 
+static inline char *debugfs_node_path_raw(struct debugfs_node *node, char *buf,
+					  size_t buflen)
+{
+	return ERR_PTR(-ENODEV);
+}
+
+static inline struct debugfs_node *debugfs_node_get(struct debugfs_node *node)
+{
+	return ERR_PTR(-ENODEV);
+}
+
+void debugfs_node_put(struct debugfs_node *node)
+{ }
+
+struct inode *debugfs_node_inode(struct debugfs_node *)
+{
+	return ERR_PTR(-ENODEV);
+}
+
+struct debugfs_node *debugfs_node_from_dentry(struct dentry *dentry)
+{
+	return ERR_PTR(-ENODEV);
+}
+
+struct dentry *debugfs_node_dentry(struct debugfs_node *node)
+{
+	return ERR_PTR(-ENODEV);
+}
+
 static inline struct dentry *debugfs_create_file_aux(const char *name,
 					umode_t mode, struct dentry *parent,
 					void *data, void *aux,
