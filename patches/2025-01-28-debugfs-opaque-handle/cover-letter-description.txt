debugfs: Replace dentry with an opaque handle in debugfs API

This patch series replaces raw dentry pointers in the debugfs API with
an opaque wrapper struct:

	struct debugfs_node {
		struct dentry dentry;
	};

Open Questions
==============

These are my primary concerns with the patch series, hence the RFC:

1. This change touches over 1100 files. Is that okay?
2. I could only automate 75% of the migration.

Purpose/Background
==================

debugfs currently relies on dentry to represent its filesystem
hierarchy, and its API directly exposes dentry pointers to users. This
tight coupling makes it difficult to modify debugfs internals. A dentry
and inode should exist only when needed, rather than being persistently
tied to debugfs. Some kernel developers have proposed using an opaque
handle for debugfs nodes instead of dentry pointers [1][2][3].

Replacing dentry with debugfs_node simplifies future migrations away
from dentry. Additionally, a declaration with debugfs_node is more
self-explanatory -- its purpose is immediately clear, unlike dentry,
which requires further context to understand its role as a debugfs
dentry.

About this patch series
=======================

This series makes the following changes:

1. Add a temporary "#define debugfs_node dentry".
2. Introduce debugfs helper functions used by Coccinelle rules.
3. Update relay to use debugfs_node instead of dentry.
4. Use Coccinelle to convert most of the kernel to debugfs_node.
5. Apply manual fixes for cases Coccinelle missed.
6. Remove the #define and introduce struct debugfs_node.

The #define is placed in both debugfs.h and dcache.h to avoid
unnecessary #include <linux/debugfs.h> additions or forward declarations
that would be removed in the final commit.

The changes to fs/debugfs/ are straightforward, swapping dentry with
debugfs_node in the API where appropriate. Internal functions convert
between the two as needed. I introduced a few trivial helper functions
for specific debugfs users. Thanks to Al Viro's recent refactoring,
parts of this change were simplified.

Most changes outside of fs/debugfs/ were mechanical and handled by
Coccinelle. Manual fixes were needed in cases where Coccinelle couldn't
fully convert the code, like dentry declarations nested in layers of
headers or function calls, code inside macros, etc.

Relay changes
=============

The most non-obvious change is in the relay system. While the relay
documentation suggests support for non-debugfs users, in practice all
relay users rely on debugfs. I updated relay to use debugfs_node revised
the documentation.

Coccinelle
==========

I wrote a Coccinelle script to automate most of the conversion. The
script is inlined at the bottom of the commit message where it was run.
This is my first time using Coccinelle, so any feedback is welcome!

The script does the following:

- Find all dentry identifiers that are arguments to or return values of
  a debugfs_* function. This step detects both debugfs.h functions and
  various wrapper functions defined outside of debugfs proper.

- Update relevant declarations and function signatures to use
  debugfs_node instead of dentry.

- Perform further fixups where appropriate. For example, replace
  d_inode() or ->d_inode with debugfs_node_inode().

Challenges I encountered:

- Running a single spatch invocation over the whole tree produces
  inconsistent results because of how header diffs are resolved. spatch
  can take different paths to resolve a header file, sometimes resulting
  in different -- sometimes conflicting -- patch hunks. I avoided this
  problem by writing a bash script that runs spatch against any files
  containing "dentry" or "debugfs", one-by-one.

- The script is more verbose than I would like. I started small but had
  to break out cases and duplicate rules for clarity and reliability.

I focused on handling the most common cases rather than covering every
edge case, balancing script complexity with effectiveness. The script
performs pretty well -- most of this patch set was generated from it.
All clever attempts I made to add new rules resulted in needing more
manual fixups.

Forward declarations and #include <linux/debugfs.h>
===================================================

I had been testing this patch set by compiling every commit with
allyesconfig, assuming that would uncover all potential compilation
errors. The first time I tried defconfig, I found an error about an
implicit declaration of struct debugfs_node, and realized I opened a can
of worms.

struct dentry is implictly included in much of the kernel, usually
transitively through <linux/fs.h>. Also, many files provide forward
declarations of struct debugfs. Figuring out where to add
#include <linux/debugfs.h> and forward declarations of struct
debugfs_node was error-prone, but I had some heuristics that helped.

The Coccinelle script attempts to add "struct debugfs_node;" wherever
there is a "struct dentry;" in files it modifies. I also modified the
kernel build to produce .i files, and I wrote a script to find any usage
of debugfs_node before a forward declaration. This led me to a couple
high-leverage #includes in core header files that I think solved the
problem.

Suggestions for solving this problem without peppering forward
declarations everywhere is welcome. I'm worried _some_ kernel
configuration out there will break because some implicit include is
missing.

Testing
=======

This was tested by building every commit in this series on an x86_64
machine with allmodconfig, including an mrproper before each build. I
also loaded a more minimal kernel into QEMU and ran:

  find /sys/kernel/debug -type f -exec stat {} +

To catch any missed instances of dentry declarations related to debugfs,
I ran the following ripgrep command and reviewed its output to ensure I
didn't miss anything obvious:

  rg 'struct dentry \*.*(debug|dbg)|(debug|dbg).*struct dentry \*' \
    -g '*.{c,h}' -g '!fs/debugfs' -g '!include/linux/debugfs.h'

Links
=====

Link: https://lore.kernel.org/all/2024012600-dose-happiest-f57d@gregkh/ [1]
Link: https://lore.kernel.org/all/20240125104822.04a5ad44@gandalf.local.home/ [2]
Link: https://lore.kernel.org/all/20250128102744.1b94a789@gandalf.local.home/ [3]
