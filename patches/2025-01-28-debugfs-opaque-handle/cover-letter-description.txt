debugfs: Replace dentry with an opaque handle in debugfs API

This patch series replaces raw dentry pointers in the debugfs API with
an opaque wrapper struct:

	struct debugfs_node {
		struct dentry dentry;
	};

Purpose/Background
==================

debugfs currently relies on dentry to represent its filesystem
hierarchy, and its API directly exposes dentry pointers to users. This
tight coupling makes it difficult to modify debugfs internals without
impacting external users. A dentry and inode should exist only when
needed, rather than being persistently tied to debugfs. Some kernel
developers have proposed using an opaque handle for debugfs nodes
instead of dentry pointers [1][2][3].

Replacing dentry with debugfs_node simplifies future migrations away
from dentry. Additionally, debugfs_node makes code more self-explanatory
-- its purpose is immediately clear, unlike dentry, which requires
further context to understand its role as a debugfs dentry.

About this patch series
=======================

This series is split into multiple commits for review but should be
squashed into one commit when merged. Commits:

1. Migrate fs/debugfs/ to debugfs_node.
2. Run Coccinelle to update the rest of the kernel (see below).
3. Manual fixes for cases Coccinelle missed.
4. Update relay system to use debugfs_node instead of dentry.

The changes to fs/debugfs/ are straightforward, swapping dentry with
debugfs_node in the API where appropriate. Internal functions convert
between the two as needed. I only had to add a few trivial helper
functions for a small number of debugfs users. Also, huge thanks to Al
Viro, who recently refactored this code, which simplified this change.

Most changes outside of fs/debugfs/ were mechanical, and thankfully
Coccinelle could handle them. I had to manually fix situations that
Coccinelle couldn't handle, like variable definitions nested in layers
of headers or function calls, code inside macros, etc.

Relay changes
=============

The most intrusive change is in the relay system, which now uses
debugfs_node instead of dentry. I put this change into a separate commit
because it is more than just a fixup. (Note that the changes to relay.c
and users of rchan_callbacks are much smaller and clearer once these
commits are squashed.)

The relay API passes around dentry pointers. While the relay API
technically supports non-debugfs users, in practice, all relay users
rely on debugfs. I replaced dentry pointers with debugfs_node, and I
updated the documentation to reflect that.

Coccinelle
==========

I wrote a Coccinelle script to automate most of the conversion. This is
my first time using Coccinelle, so any feedback is welcome!

The script attempts to do the following:

- Find all dentry identifiers that are arguments to or return values of
  a debugfs_* function.

- Updates relevant declarations, struct fields, and function signatures
  to use debugfs_node.

- Perform some fixups, like replacing d_inode() or ->d_inode with
  debugfs_node_inode() where appropriate.

Challenges I encountered:

- Running a single spatch invocation over the whole tree produces
  inconsistent results because of how header diffs are resolved. spatch
  can take different paths to resolve a header file, sometimes resulting
  in different patch hunks. I avoided this problem by writing a bash
  script that runs spatch against any files containing "dentry" or
  "debugfs", one-by-one.

- The script is more verbose than I would like. I started small but had
  to break out cases and duplicate rules for reliability.

I focused on handling the most common cases rather than covering every
edge case, balancing script complexity with effectiveness. The script
performs pretty well -- most of this patch set was generated from it.
All clever attempts I made to add new rules resulted in needing more
manual fixups.

Testing
=======

This was tested by building the kernel on an x86_64 machine with
allmodconfig. I also loaded this kernel into a QEMU system and ran:

  find /sys/kernel/debug -type f -exec stat {} +

To catch any missed instances of dentry declarations related to debugfs,
I ran the following ripgrep command and reviewed its output to ensure I
didn't miss anything obvious:

  rg 'struct dentry \*.*(debug|dbg)|(debug|dbg).*struct dentry \*' -g '*.{c,h}' \
    -g '!fs/debugfs' -g '!include/linux/debugfs.h'

Links
=====

Link: https://lore.kernel.org/all/2024012600-dose-happiest-f57d@gregkh/ [1]
Link: https://lore.kernel.org/all/20240125104822.04a5ad44@gandalf.local.home/ [2]
Link: https://lore.kernel.org/all/20250128102744.1b94a789@gandalf.local.home/ [3]
